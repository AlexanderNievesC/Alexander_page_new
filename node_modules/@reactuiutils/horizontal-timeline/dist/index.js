// src/utils/cn.ts
import { clsx } from "clsx";
import { twMerge } from "tailwind-merge";
function cn(...inputs) {
  return twMerge(clsx(inputs));
}

// src/components/action-button.tsx
import { jsx } from "react/jsx-runtime";
var ActionButton = ({
  children,
  className,
  ...rest
}) => {
  return /* @__PURE__ */ jsx(
    "button",
    {
      className: cn(
        "flex px-6 mt-2 text-white py-1 hover:bg-blue-600 transition-colors cursor-pointer bg-blue-500 rounded-lg font-roboto",
        className
      ),
      ...rest,
      children
    }
  );
};

// src/components/timeline.tsx
import { Children, cloneElement } from "react";

// src/components/fallback.tsx
import { jsx as jsx2, jsxs } from "react/jsx-runtime";
var Fallback = (props) => {
  return /* @__PURE__ */ jsx2("div", { className: "relative min-w-40 -ml-[10px]", children: /* @__PURE__ */ jsx2("div", { className: "relative flex flex-col", children: /* @__PURE__ */ jsx2(
    "svg",
    {
      width: "100%",
      height: "100%",
      viewBox: "0 0 59.531 49.477",
      ...props,
      children: /* @__PURE__ */ jsxs("g", { transform: "matrix(.99959 0 0 .99838 -100.96 -38.57)", children: [
        /* @__PURE__ */ jsx2(
          "path",
          {
            d: "M101.002 69.656h55.492l4.064 4.158-4.064 4.205h-55.492l3.85-4.205z",
            fill: "#f2f2f2",
            strokeWidth: 0.24
          }
        ),
        /* @__PURE__ */ jsx2(
          "circle",
          {
            cx: 130.726,
            cy: 73.838,
            r: 1.522,
            fill: "#fff",
            strokeWidth: 0.15
          }
        ),
        /* @__PURE__ */ jsx2(
          "circle",
          {
            cx: 130.78,
            cy: 48.202,
            r: 9.57,
            fill: "#f2f2f2",
            strokeWidth: 0.194
          }
        ),
        /* @__PURE__ */ jsx2(
          "rect",
          {
            width: 0.794,
            height: 14.363,
            x: 130.383,
            y: 56.309,
            ry: 0,
            fill: "#f2f2f2",
            strokeWidth: 0.108
          }
        ),
        /* @__PURE__ */ jsxs("g", { transform: "translate(.661 -148.34)", fill: "#f2f2f2", children: [
          /* @__PURE__ */ jsx2(
            "rect",
            {
              ry: 0,
              y: 228.581,
              x: 115.485,
              height: 4.009,
              width: 29.266,
              strokeWidth: 0.244
            }
          ),
          /* @__PURE__ */ jsx2(
            "rect",
            {
              width: 24.722,
              height: 1.871,
              x: 117.757,
              y: 234.658,
              ry: 0,
              strokeWidth: 0.153
            }
          )
        ] })
      ] })
    }
  ) }) });
};

// src/components/timeline.tsx
import { jsx as jsx3, jsxs as jsxs2 } from "react/jsx-runtime";
var Timeline = ({
  children,
  minEvents = 0,
  ...rest
}) => {
  const difference = children ? minEvents - Children.count(children) : minEvents;
  const childrenWithProps = children ? Children.map(
    children,
    (child, index) => cloneElement(child, {
      isFirst: index === 0
    })
  ) : [];
  return /* @__PURE__ */ jsxs2("div", { className: cn("flex overflow-x-auto overflow-y-hidden"), ...rest, children: [
    childrenWithProps,
    minEvents > 0 && difference > 0 && Array.from({ length: difference }, (_, index) => {
      return /* @__PURE__ */ jsx3(Fallback, {}, index);
    })
  ] });
};

// src/components/timeline-event.tsx
import { Fragment, jsx as jsx4, jsxs as jsxs3 } from "react/jsx-runtime";
var TimelineEvent = ({
  icon: Icon,
  isFirst = false,
  color = "#e0e0e0",
  children
}) => {
  return /* @__PURE__ */ jsxs3("div", { className: cn("relative", "min-w-40", `${!isFirst && "-ml-[10px]"}`), children: [
    /* @__PURE__ */ jsx4("div", { className: cn("relative flex flex-col"), children: /* @__PURE__ */ jsxs3(Fragment, { children: [
      Icon && /* @__PURE__ */ jsx4(Icon, { className: "absolute top-[calc(23%_-_clamp(10px,1vw,20px))] left-1/2 transform -translate-x-1/2 text-[clamp(20px,2vw,40px)] text-white" }),
      /* @__PURE__ */ jsx4("svg", { width: "100%", height: "100%", viewBox: "0 0 60 40", children: /* @__PURE__ */ jsxs3("g", { transform: "matrix(.99959 0 0 .99838 -100.96 -38.57)", children: [
        /* @__PURE__ */ jsx4(
          "path",
          {
            d: "M101.002 69.656h55.492l4.064 4.158-4.064 4.205h-55.492l3.85-4.205z",
            fill: color,
            strokeWidth: 0.24
          }
        ),
        /* @__PURE__ */ jsx4(
          "circle",
          {
            cx: 130.726,
            cy: 73.838,
            r: 1.522,
            fill: "#fff",
            strokeWidth: 0.15
          }
        ),
        /* @__PURE__ */ jsx4(
          "circle",
          {
            cx: 130.78,
            cy: 48.202,
            r: 9.57,
            fill: color,
            strokeWidth: 0.194
          }
        ),
        /* @__PURE__ */ jsx4(
          "rect",
          {
            width: 0.794,
            height: 14.363,
            x: 130.383,
            y: 56.309,
            ry: 0,
            fill: color,
            strokeWidth: 0.108
          }
        )
      ] }) })
    ] }) }),
    /* @__PURE__ */ jsx4("div", { className: "relative flex flex-col items-center ", children })
  ] });
};

// src/components/timeline-subtitle.tsx
import { jsx as jsx5 } from "react/jsx-runtime";
var TimelineSubTitle = ({
  children,
  className,
  ...rest
}) => {
  return /* @__PURE__ */ jsx5(
    "div",
    {
      className: cn(
        "font-roboto text-xs leading-5 text-black flex justify-center font-normal",
        className
      ),
      ...rest,
      children
    }
  );
};

// src/components/timeline-title.tsx
import { jsx as jsx6 } from "react/jsx-runtime";
var TimelineTitle = ({
  children,
  className,
  ...rest
}) => {
  return /* @__PURE__ */ jsx6(
    "div",
    {
      className: cn(
        "font-roboto text-xl leading-8 text-black flex justify-center font-medium",
        className
      ),
      ...rest,
      children
    }
  );
};
export {
  ActionButton as Action,
  TimelineEvent as Event,
  TimelineSubTitle as Subtitle,
  Timeline,
  TimelineTitle as Title
};
